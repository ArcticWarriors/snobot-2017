
buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath 'gradle.plugin.edu.wpi.first:native-utils:1.2.9'
    }
}
apply plugin: 'edu.wpi.first.NativeUtils'
import edu.wpi.first.nativeutils.NativeUtils

apply plugin: "java"

//////////////////////////////////////////////////////
// Define Your Properties
//////////////////////////////////////////////////////
ext.robotName = "Robot"
//////////////////////////////////////////////////////


ext.wrapperDir = "build/wrapper_output"
ext.getSnobotSimVersion = {
    return '0.2'
}
apply from: "wrapper_tools/generate_wrapper_files.gradle"

sourceSets {
    main {
        java {
            srcDirs = ["${wrapperDir}/java"]
        }
    }
}

def jniClasses = ["com.snobot.simulator.cpp_wrapper.${robotName}.RobotSimulatorJni"]

model {
    jniConfigs {
        simulatorRobotWrapperShared(JNIConfig) {
            jniDefinitionClasses = jniClasses
            jniArmHeaderLocations = [ all: file("${projectDir}/wrapper_tools/arm-linux-jni") ]
            sourceSets = [ project.sourceSets.main ]
        }
        simulatorRobotWrapperStatic(JNIConfig) {
            jniDefinitionClasses = jniClasses
            jniArmHeaderLocations = [ all: file("${projectDir}/wrapper_tools/arm-linux-jni") ]
            sourceSets = [ project.sourceSets.main ]
        }
    }
    
    components {
        simulatorRobotWrapperShared(NativeLibrarySpec) {
            binaries {
                all {
                   it.lib library: 'CppRobot', linkage: 'static'
                }
            }
            
            baseName = 'snobotSimJavaJni'
            sources {
                cpp {
                    source {
                        srcDirs = ["${wrapperDir}/src"]
                        includes = ['**/*.cpp']
                        println srcDirs
                    }
                    exportedHeaders {
                        srcDirs = ["${wrapperDir}/cpp",
                                   // Temp
                                   "${extractWplibcHeadersZip.libsdir}", 
                                   "${extractHalHeadersZip.libsdir}",]
                    }
                }
            }
        }
    }
}

jar {
    description = 'Generates NetworkTables jar, with the JNI shared libraries embedded'
    baseName = "${robotName}CppSimulator"
    duplicatesStrategy = 'exclude'

    dependsOn { classes }
    
    model {
        binaries {
            withType(SharedLibraryBinarySpec) { binary ->
                if (binary.component.name == 'simulatorRobotWrapperShared') {
                    from(binary.sharedLibraryFile) {
                        into NativeUtils.getPlatformPath(binary)
                    }
                }
            }
        }
    }
}
