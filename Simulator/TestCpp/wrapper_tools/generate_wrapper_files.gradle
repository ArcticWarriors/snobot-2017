
def createFile(fileContents, dumpDirPath, fileName) {
    def dumpPath = new File(wrapperDir, dumpDirPath)
    def dumpFile = file(new File(dumpPath, fileName))
    
    if (dumpFile.exists())
    {
        dumpFile.delete()
    }
    
    if (!dumpPath.exists())
    {
        dumpPath.mkdirs()
    }
    
    dumpFile.write(fileContents)
    
    println "Auto-generated " + dumpFile
}


task generateCppRobotWrapper() {
    description = 'Generates the simulation wrappers'
    group = 'SnobotSim'
    
    
    def wrapperClass = """
/*
 * Autogenerated file! Do not manually edit this file. This version is regenerated
 * any time the publish task is run, or when this file is deleted.
 */

#ifndef TMP_CPPROBOTWRAPPER_H_
#define TMP_CPPROBOTWRAPPER_H_

#include <memory>
#include "RobotBase.h"
#include "${robotName}.h"

#ifdef _MSC_VER
#define EXPORT_ __declspec(dllexport)
#else
#define EXPORT_
#endif

class EXPORT_ CppWrapper_${robotName}
{
public:
    CppWrapper_${robotName}() :
        mRobot(new ${robotName})
    {
    
    }
    virtual ~CppWrapper_${robotName}()
    {
    
    }

    std::shared_ptr<RobotBase> GetRobot()
    {
        return mRobot;
    }
protected:

    std::shared_ptr<RobotBase> mRobot;
};

#endif /* TMP_CPPROBOTWRAPPER_H_ */
    """.trim()
    
    
    createFile(wrapperClass, 'src', 'CppWrapper_' + robotName + '.h')
}





task generateWrapperJavaJni() {
    description = 'Generates the simulation wrappers'
    group = 'SnobotSim'
    
    def jniText = """
/*
 * Autogenerated file! Do not manually edit this file. This version is regenerated
 * any time the publish task is run, or when this file is deleted.
 */
package com.snobot.simulator.cpp_wrapper.${robotName};

<<<<<<< HEAD
<<<<<<< HEAD
import java.io.File;
import java.io.InputStream;

public class ${robotName}SimulatorJni
{

    public static String getLibraryName()
    {
        return "CppTest";
    }

    public static native void createRobot();
    public static native void startCompetition();
=======
public class ${robotName}SimulatorJni
{
  public static native void startCompetition();
>>>>>>> b5fb176... Adding a CPP project to test the simulator with
=======
import java.io.File;
import java.io.InputStream;

public class ${robotName}SimulatorJni
{
    static boolean libraryLoaded = false;
    
    private static void loadLibrary(String aLibraryname)
    {
        String osname = System.getProperty("os.name");
        String resname;
        if (osname.startsWith("Windows"))
        {
            resname = "/Windows/" + System.getProperty("os.arch") + "/";
        }
        else
        {
            resname = "/" + osname + "/" + System.getProperty("os.arch") + "/";
        }
        System.out.println("platform: " + resname);
        if (osname.startsWith("Windows"))
        {
            resname += aLibraryname + ".dll";
        }
        else if (osname.startsWith("Mac"))
        {
            resname += aLibraryname + ".dylib";
        }
        else
        {
            resname += "lib" + aLibraryname + ".so";
        }
        InputStream is = ${robotName}SimulatorJni.class.getResourceAsStream(resname);
        if (is != null)
        {
            resname = new File("../2017MockWpi/native_wpi_libs" + resname).getAbsolutePath();
            System.out.println("CPP WRAPPER: " + resname);
            System.load(resname);
        }
        else
        {
            throw new RuntimeException("Could not load " + resname);
        }
    }
    static
    {
        if (!libraryLoaded)
        {
            //loadLibrary("snobotSimHal");
            //loadLibrary("HALAthena");
            //loadLibrary("ntcore");
            //loadLibrary("wpiutil");
            loadLibrary("CppTest");
            libraryLoaded = true;
        }
    }


    public static native void createRobot();
    public static native void startCompetition();
>>>>>>> 6761f30... Making the simulator able to run CPP projects 
}
"""
    createFile(jniText, "java/com/snobot/simulator/cpp_wrapper/${robotName}", "${robotName}SimulatorJni.java")
    
}



task generateWrapperCppJni() {
    description = 'Generates the simulation wrappers'
    group = 'SnobotSim'
    
    def jniText = """
/*
 * Autogenerated file! Do not manually edit this file. This version is regenerated
 * any time the publish task is run, or when this file is deleted.
 */

#include "com_snobot_simulator_cpp_wrapper_${robotName}_${robotName}SimulatorJni.h"
#include "CppWrapper_${robotName}.h"

<<<<<<< HEAD
<<<<<<< HEAD
<<<<<<< HEAD
static CppWrapper_${robotName}* wrapper = NULL;
    
JNIEXPORT void JNICALL Java_com_snobot_simulator_cpp_1wrapper_${robotName}_${robotName}SimulatorJni_createRobot
(JNIEnv *, jclass)
{
	wrapper = new CppWrapper_${robotName}();
}

JNIEXPORT void JNICALL Java_com_snobot_simulator_cpp_1wrapper_${robotName}_${robotName}SimulatorJni_startCompetition
(JNIEnv *, jclass)
{
    wrapper->GetRobot()->StartCompetition();
=======
JNIEXPORT void JNICALL Java_com_snobot_simulator_cpp_1wrapper_${robotName}_${robotName}SimulatorJni_startRobot
=======
=======
static CppWrapper_${robotName}* wrapper = NULL;
    
>>>>>>> 1a6d3d7... C++ Simulator works!
JNIEXPORT void JNICALL Java_com_snobot_simulator_cpp_1wrapper_${robotName}_${robotName}SimulatorJni_createRobot
(JNIEnv *, jclass)
{
	wrapper = new CppWrapper_${robotName}();
}

JNIEXPORT void JNICALL Java_com_snobot_simulator_cpp_1wrapper_${robotName}_${robotName}SimulatorJni_startCompetition
>>>>>>> 6761f30... Making the simulator able to run CPP projects 
(JNIEnv *, jclass)
{
<<<<<<< HEAD
    static CppWrapper_${robotName} wrapper;
>>>>>>> b5fb176... Adding a CPP project to test the simulator with
=======
    wrapper->GetRobot()->StartCompetition();
>>>>>>> 1a6d3d7... C++ Simulator works!
}

"""
    createFile(jniText, 'src', "com_snobot_simulator_cpp_wrapper_${robotName}_${robotName}SimulatorJni.cpp")
    
}
