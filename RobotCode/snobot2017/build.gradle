buildscript {
    repositories {
        mavenLocal()
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    
    // UNCOMMENT for local plugin
    //dependencies {
    //    classpath files('C:/Users/PJ/.m2/repository/com/snobot/simulator/plugin/SnobotSimulatorPlugin/2017.12.16/SnobotSimulatorPlugin-2017.12.16.jar')
    //}
}
plugins {
    id "java"
    id "eclipse"
    id "idea"
    id "jacoco"
    id "jaci.openrio.gradle.GradleRIO" version "2018-beta-5b"
    
    // COMMENT for local plugin
    id "com.snobot.simulator.plugin.SnobotSimulatorPlugin" version "2018.01.01"
}

apply plugin: com.snobot.simulator.plugin.SnobotSimulatorPlugin
//snobotSimVersions.snobotSimVersion = "0.1"

snobotSimVersions {
    snobotSimVersion = "0.6.0"
}

repositories {

    mavenLocal()
    mavenCentral()
}

sourceSets {
    main {
        java {
            srcDirs = ["src", "../SnobotRobotLibs/src"]
        }
    }
    
    test {
        java {
            srcDirs = ["test/unit_tests", "test/simulator"]
        }
    }
}

dependencies {

    compile wpilib()
    //compile 'thirdparty.frc.ctre:Toolsuite-Java:4.4.1.11'
    
    compile 'com.googlecode.json-simple:json-simple:1.1.1'
    compile files('../SnobotRobotLibs/dependencies/RIOdroid.jar')
    
    testCompile snobotSimCompile()
    testCompile snobotSimJavaCompile()
}

// SnobotSim
build.dependsOn snobotSimUnzipNativeTools

test {
	ignoreFailures = true
}


jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
    
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,  exclude: 
                ['com/team254/lib/trajectory/gen/**',
                 'com/snobot2017/xtrajectory_gen/**'
                ])
        })
    }
}


task wrapper(type: Wrapper) {
    gradleVersion = '4.2.1'
}
