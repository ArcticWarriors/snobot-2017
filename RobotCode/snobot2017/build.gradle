
plugins {
    id "java"
    id "eclipse"
    id "idea"
    id "jacoco"
    id "jaci.openrio.gradle.GradleRIO" version "2018-beta-3a"
}

def snobotSimVersion = "0.3"

wpi {
    wpilibVersion = '+'
    ntcoreVersion = '+'
    opencvVersion = '+'
    cscoreVersion = '+'
    wpiutilVersion = '+'

//    ctreVersion = '+'
//    navxVersion = '+'

    smartDashboardVersion = '+'
    shuffleboardVersion = '+'

    toolchainVersion = '+'
}

repositories {
    //maven {
    //    url "http://raw.githubusercontent.com/pjreiniger/maven_repo/master/"
    //}

    mavenLocal()
    mavenCentral()
}

sourceSets {
    main {
        java {
            srcDirs = ["src", "../SnobotRobotLibs/src"]
        }
    }
    
    test {
        java {
            srcDirs = ["test/unit_tests", "test/simulator"]
        }
    }
}

configurations {
    native3rdPartyDeps
    testRuntime.extendsFrom(native3rdPartyDeps)
}

dependencies {

    compile wpilib()
    //compile 'thirdparty.frc.ctre:Toolsuite-Java:4.4.1.11'
    
    compile 'com.googlecode.json-simple:json-simple:1.1.1'
    compile files('../SnobotRobotLibs/dependencies/RIOdroid.jar')

    // Snobot Sim
    testCompile    'com.snobot.simulator:snobot_sim_gui:'  + snobotSimVersion + ':all'
    //testCompile    'com.snobot.simulator:snobot_sim_java:' + snobotSimVersion + ':uber_native-linux'
    testCompile    'com.snobot.simulator:snobot_sim_java:' + snobotSimVersion + ':uber_native-windows'
    
    // Snobot Sim Deps
    native3rdPartyDeps 'net.java.jinput:jinput:2.0.7'
    testRuntime 'jfree:jcommon:1.0.16'
    testRuntime 'jfree:jfreechart:1.0.13'
    testRuntime 'log4j:log4j:1.2.16'
    testRuntime 'org.yaml:snakeyaml:1.18'
    testRuntime 'com.miglayout:miglayout-swing:4.2'
    
    testRuntime 'edu.wpi.first.ntcore:ntcore-jni:+:all'
    testRuntime 'edu.wpi.first.cscore:cscore-jni:+:all'
    testRuntime 'org.opencv:opencv-jni:+:all'
}

task unzipNativeLibraries(type: Copy) {

    configurations.native3rdPartyDeps.each {
        from zipTree(it)
        into "build/native_libs"
        include "**/*.dll"
        include "**/*.lib"
        include "**/*.pdb"
        include "**/*.so*"
        include "**/*.a"
    }
    
    includeEmptyDirs = false
}

build.dependsOn unzipNativeLibraries

eclipse.classpath.file {
    withXml {
        provider ->
        provider.asNode().findAll { it.@path.contains("jinput") && !it.@path.contains("natives") }.each {
                def container = it
                container.appendNode('attributes').appendNode('attribute', [name: 'org.eclipse.jdt.launching.CLASSPATH_ATTR_LIBRARY_PATH_ENTRY', value:"snobot2017/build/native_libs"])
        }
    }
}

test {
	ignoreFailures = true
}


jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
    
    afterEvaluate {
        classDirectories = files(classDirectories.files.collect {
            fileTree(dir: it,  exclude: 
                ['com/team254/lib/trajectory/gen/**',
                 'com/snobot2017/xtrajectory_gen/**'
                ])
        })
    }
}


task wrapper(type: Wrapper) {
    gradleVersion = '4.2.1'
}
