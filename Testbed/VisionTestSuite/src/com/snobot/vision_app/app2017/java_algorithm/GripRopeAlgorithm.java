package com.snobot.vision_app.app2017.java_algorithm;

import java.util.ArrayList;
import java.util.List;

import org.opencv.core.Core;
import org.opencv.core.CvType;
import org.opencv.core.Mat;
import org.opencv.core.MatOfInt;
import org.opencv.core.MatOfPoint;
import org.opencv.core.MatOfPoint2f;
import org.opencv.core.Point;
import org.opencv.core.Rect;
import org.opencv.core.Scalar;
import org.opencv.core.Size;
import org.opencv.imgproc.Imgproc;

import com.snobot.vision.HslThreshold;

/**
 * GripPipeline class.
 *
 * <p>
 * An OpenCV pipeline generated by GRIP.
 *
 * @author GRIP
 */
public class GripRopeAlgorithm
{

    // Outputs
    private Mat blurOutput = new Mat();
    private Mat hslThresholdOutput = new Mat();
    private Mat cvDilateOutput = new Mat();
    private Mat cvErodeOutput = new Mat();
    private ArrayList<MatOfPoint> findContoursOutput = new ArrayList<MatOfPoint>();
    private ArrayList<MatOfPoint> filterContoursOutput = new ArrayList<MatOfPoint>();

    static {
        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
    }
    
    double[] hslThresholdHue = { 0.0, 17.201365187713286 };
    double[] hslThresholdSaturation = { 199.5053956834532, 255.0 };
    double[] hslThresholdLuminance = { 25.22482014388489, 98.34470989761091 };

    public void setThreshold(HslThreshold aMin, HslThreshold aMax)
    {
        hslThresholdHue = new double[]{aMin.hue, aMax.hue};
        hslThresholdSaturation = new double[]{aMin.sat, aMax.sat};
        hslThresholdLuminance = new double[]{aMin.lum, aMax.lum};
    }
    /**
     * This is the primary method that runs the entire pipeline and updates the
     * outputs.
     */
    public void process(Mat source0)
    {
        // Step Blur0:
        Mat blurInput = source0;
        BlurType blurType = BlurType.get("Box Blur");
        double blurRadius = 32.432432432432435;
        blur(blurInput, blurType, blurRadius, blurOutput);

        // Step HSL_Threshold0:
        Mat hslThresholdInput = blurOutput;
        hslThreshold(hslThresholdInput, hslThresholdHue, hslThresholdSaturation, hslThresholdLuminance, hslThresholdOutput);

        // Step CV_dilate0:
        Mat cvDilateSrc = hslThresholdOutput;
        Mat cvDilateKernel = new Mat();
        Point cvDilateAnchor = new Point(-1, -1);
        double cvDilateIterations = 20.0;
        int cvDilateBordertype = 0;
        Scalar cvDilateBordervalue = new Scalar(-1);
        cvDilate(cvDilateSrc, cvDilateKernel, cvDilateAnchor, cvDilateIterations, cvDilateBordertype, cvDilateBordervalue, cvDilateOutput);

        // Step CV_erode0:
        Mat cvErodeSrc = cvDilateOutput;
        Mat cvErodeKernel = new Mat();
        Point cvErodeAnchor = new Point(-1, -1);
        double cvErodeIterations = 20.0;
        int cvErodeBordertype = 0;
        Scalar cvErodeBordervalue = new Scalar(-1);
        cvErode(cvErodeSrc, cvErodeKernel, cvErodeAnchor, cvErodeIterations, cvErodeBordertype, cvErodeBordervalue, cvErodeOutput);

        // Step Find_Contours0:
        Mat findContoursInput = cvErodeOutput;
        boolean findContoursExternalOnly = false;
        findContours(findContoursInput, findContoursExternalOnly, findContoursOutput);

        // Step Filter_Contours0:
        ArrayList<MatOfPoint> filterContoursContours = findContoursOutput;
        double filterContoursMinArea = 0;
        double filterContoursMinPerimeter = 0;
        double filterContoursMinWidth = 900.0;
        double filterContoursMaxWidth = 1000000.0;
        double filterContoursMinHeight = 0;
        double filterContoursMaxHeight = 1000000.0;
        double[] filterContoursSolidity =
        { 0.0, 100.0 };
        double filterContoursMaxVertices = 1000000.0;
        double filterContoursMinVertices = 0;
        double filterContoursMinRatio = 0;
        double filterContoursMaxRatio = 1000;
        filterContours(filterContoursContours, filterContoursMinArea, filterContoursMinPerimeter, filterContoursMinWidth, filterContoursMaxWidth,
                filterContoursMinHeight, filterContoursMaxHeight, filterContoursSolidity, filterContoursMaxVertices, filterContoursMinVertices,
                filterContoursMinRatio, filterContoursMaxRatio, filterContoursOutput);

    }

    /**
     * This method is a generated getter for the output of a Blur.
     * 
     * @return Mat output from Blur.
     */
    public Mat blurOutput()
    {
        return blurOutput;
    }

    /**
     * This method is a generated getter for the output of a HSL_Threshold.
     * 
     * @return Mat output from HSL_Threshold.
     */
    public Mat hslThresholdOutput()
    {
        return hslThresholdOutput;
    }

    /**
     * This method is a generated getter for the output of a CV_dilate.
     * 
     * @return Mat output from CV_dilate.
     */
    public Mat cvDilateOutput()
    {
        return cvDilateOutput;
    }

    /**
     * This method is a generated getter for the output of a CV_erode.
     * 
     * @return Mat output from CV_erode.
     */
    public Mat cvErodeOutput()
    {
        return cvErodeOutput;
    }

    /**
     * This method is a generated getter for the output of a Find_Contours.
     * 
     * @return ArrayList<MatOfPoint> output from Find_Contours.
     */
    public ArrayList<MatOfPoint> findContoursOutput()
    {
        return findContoursOutput;
    }

    /**
     * This method is a generated getter for the output of a Filter_Contours.
     * 
     * @return ArrayList<MatOfPoint> output from Filter_Contours.
     */
    public ArrayList<MatOfPoint> filterContoursOutput()
    {
        return filterContoursOutput;
    }


    /**
     * An indication of which type of filter to use for a blur. Choices are BOX,
     * GAUSSIAN, MEDIAN, and BILATERAL
     */
    enum BlurType
    {
        BOX("Box Blur"), GAUSSIAN("Gaussian Blur"), MEDIAN("Median Filter"), BILATERAL("Bilateral Filter");

        private final String label;

        BlurType(String label)
        {
            this.label = label;
        }

        public static BlurType get(String type)
        {
            if (BILATERAL.label.equals(type))
            {
                return BILATERAL;
            }
            else if (GAUSSIAN.label.equals(type))
            {
                return GAUSSIAN;
            }
            else if (MEDIAN.label.equals(type))
            {
                return MEDIAN;
            }
            else
            {
                return BOX;
            }
        }

        @Override
        public String toString()
        {
            return this.label;
        }
    }

    /**
     * Softens an image using one of several filters.
     * 
     * @param input
     *            The image on which to perform the blur.
     * @param type
     *            The blurType to perform.
     * @param doubleRadius
     *            The radius for the blur.
     * @param output
     *            The image in which to store the output.
     */
    private void blur(Mat input, BlurType type, double doubleRadius, Mat output)
    {
        int radius = (int) (doubleRadius + 0.5);
        int kernelSize;
        switch (type)
        {
        case BOX:
            kernelSize = 2 * radius + 1;
            Imgproc.blur(input, output, new Size(kernelSize, kernelSize));
            break;
        case GAUSSIAN:
            kernelSize = 6 * radius + 1;
            Imgproc.GaussianBlur(input, output, new Size(kernelSize, kernelSize), radius);
            break;
        case MEDIAN:
            kernelSize = 2 * radius + 1;
            Imgproc.medianBlur(input, output, kernelSize);
            break;
        case BILATERAL:
            Imgproc.bilateralFilter(input, output, -1, radius, radius);
            break;
        }
    }

    /**
     * Segment an image based on hue, saturation, and luminance ranges.
     *
     * @param input
     *            The image on which to perform the HSL threshold.
     * @param hue
     *            The min and max hue
     * @param sat
     *            The min and max saturation
     * @param lum
     *            The min and max luminance
     * @param output
     *            The image in which to store the output.
     */
    private void hslThreshold(Mat input, double[] hue, double[] sat, double[] lum, Mat out)
    {
        Imgproc.cvtColor(input, out, Imgproc.COLOR_BGR2HLS);
        Core.inRange(out, new Scalar(hue[0], lum[0], sat[0]), new Scalar(hue[1], lum[1], sat[1]), out);
    }

    /**
     * Expands area of higher value in an image.
     * 
     * @param src
     *            the Image to dilate.
     * @param kernel
     *            the kernel for dilation.
     * @param anchor
     *            the center of the kernel.
     * @param iterations
     *            the number of times to perform the dilation.
     * @param borderType
     *            pixel extrapolation method.
     * @param borderValue
     *            value to be used for a constant border.
     * @param dst
     *            Output Image.
     */
    private void cvDilate(Mat src, Mat kernel, Point anchor, double iterations, int borderType, Scalar borderValue, Mat dst)
    {
        if (kernel == null)
        {
            kernel = new Mat();
        }
        if (anchor == null)
        {
            anchor = new Point(-1, -1);
        }
        if (borderValue == null)
        {
            borderValue = new Scalar(-1);
        }
        Imgproc.dilate(src, dst, kernel, anchor, (int) iterations);
    }

    /**
     * Expands area of lower value in an image.
     * 
     * @param src
     *            the Image to erode.
     * @param kernel
     *            the kernel for erosion.
     * @param anchor
     *            the center of the kernel.
     * @param iterations
     *            the number of times to perform the erosion.
     * @param borderType
     *            pixel extrapolation method.
     * @param borderValue
     *            value to be used for a constant border.
     * @param dst
     *            Output Image.
     */
    private void cvErode(Mat src, Mat kernel, Point anchor, double iterations, int borderType, Scalar borderValue, Mat dst)
    {
        if (kernel == null)
        {
            kernel = new Mat();
        }
        if (anchor == null)
        {
            anchor = new Point(-1, -1);
        }
        if (borderValue == null)
        {
            borderValue = new Scalar(-1);
        }
        Imgproc.erode(src, dst, kernel, anchor, (int) iterations);
    }

    /**
     * Sets the values of pixels in a binary image to their distance to the
     * nearest black pixel.
     * 
     * @param input
     *            The image on which to perform the Distance Transform.
     * @param type
     *            The Transform.
     * @param maskSize
     *            the size of the mask.
     * @param output
     *            The image in which to store the output.
     */
    private void findContours(Mat input, boolean externalOnly, List<MatOfPoint> contours)
    {
        Mat hierarchy = new Mat();
        contours.clear();
        int mode;
        if (externalOnly)
        {
            mode = Imgproc.RETR_EXTERNAL;
        }
        else
        {
            mode = Imgproc.RETR_LIST;
        }
        int method = Imgproc.CHAIN_APPROX_SIMPLE;
        Imgproc.findContours(input, contours, hierarchy, mode, method);
    }


    /**
     * Filters out contours that do not meet certain criteria.
     * 
     * @param inputContours
     *            is the input list of contours
     * @param output
     *            is the the output list of contours
     * @param minArea
     *            is the minimum area of a contour that will be kept
     * @param minPerimeter
     *            is the minimum perimeter of a contour that will be kept
     * @param minWidth
     *            minimum width of a contour
     * @param maxWidth
     *            maximum width
     * @param minHeight
     *            minimum height
     * @param maxHeight
     *            maximimum height
     * @param Solidity
     *            the minimum and maximum solidity of a contour
     * @param minVertexCount
     *            minimum vertex Count of the contours
     * @param maxVertexCount
     *            maximum vertex Count
     * @param minRatio
     *            minimum ratio of width to height
     * @param maxRatio
     *            maximum ratio of width to height
     */
    private void filterContours(List<MatOfPoint> inputContours, double minArea, double minPerimeter, double minWidth, double maxWidth,
            double minHeight, double maxHeight, double[] solidity, double maxVertexCount, double minVertexCount, double minRatio, double maxRatio,
            List<MatOfPoint> output)
    {
        final MatOfInt hull = new MatOfInt();
        output.clear();
        // operation
        for (int i = 0; i < inputContours.size(); i++)
        {
            final MatOfPoint contour = inputContours.get(i);
            final Rect bb = Imgproc.boundingRect(contour);
            if (bb.width < minWidth || bb.width > maxWidth)
                continue;
            if (bb.height < minHeight || bb.height > maxHeight)
                continue;
            final double area = Imgproc.contourArea(contour);
            if (area < minArea)
                continue;
            if (Imgproc.arcLength(new MatOfPoint2f(contour.toArray()), true) < minPerimeter)
                continue;
            Imgproc.convexHull(contour, hull);
            MatOfPoint mopHull = new MatOfPoint();
            mopHull.create((int) hull.size().height, 1, CvType.CV_32SC2);
            for (int j = 0; j < hull.size().height; j++)
            {
                int index = (int) hull.get(j, 0)[0];
                double[] point = new double[]
                { contour.get(index, 0)[0], contour.get(index, 0)[1] };
                mopHull.put(j, 0, point);
            }
            final double solid = 100 * area / Imgproc.contourArea(mopHull);
            if (solid < solidity[0] || solid > solidity[1])
                continue;
            if (contour.rows() < minVertexCount || contour.rows() > maxVertexCount)
                continue;
            final double ratio = bb.width / (double) bb.height;
            if (ratio < minRatio || ratio > maxRatio)
                continue;
            output.add(contour);
        }
    }




}

