package com.snobot.vision;

import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.core.Point;
import org.opencv.core.Scalar;
import org.opencv.core.Size;
import org.opencv.imgproc.Imgproc;

/**
* GripPipeline class.
*
* <p>An OpenCV pipeline generated by GRIP.
*
* @author GRIP
*/
public class RopeGripPipeline
{

	//Outputs
    private Mat blurOutput = new Mat();
	private Mat hslThresholdOutput = new Mat();
	private Mat cvDilateOutput = new Mat();
    private Mat cvErodeOutput = new Mat();

	static {
		System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
	}
	
    double[] hslThresholdHue = { 0.0, 17.201365187713286 };
    double[] hslThresholdSaturation = { 199.5053956834532, 255.0 };
    double[] hslThresholdLuminance = { 25.22482014388489, 98.34470989761091 };

    public void setThreshold(HslThreshold aMin, HslThreshold aMax)
    {
        hslThresholdHue = new double[]{aMin.hue, aMax.hue};
        hslThresholdSaturation = new double[]{aMin.sat, aMax.sat};
        hslThresholdLuminance = new double[]{aMin.lum, aMax.lum};
    }
	/**
	 * This is the primary method that runs the entire pipeline and updates the outputs.
	 */
	public void process(Mat source0) {
        // Step Blur0:
        Mat blurInput = source0;
        BlurType blurType = BlurType.get("Box Blur");
        double blurRadius = 32.432432432432435;
        blur(blurInput, blurType, blurRadius, blurOutput);

		// Step HSL_Threshold0:
        Mat hslThresholdInput = blurOutput;
		hslThreshold(hslThresholdInput, hslThresholdHue, hslThresholdSaturation, hslThresholdLuminance, hslThresholdOutput);

		// Step CV_dilate0:
        Mat cvDilateSrc = hslThresholdOutput;
		Mat cvDilateKernel = new Mat();
		Point cvDilateAnchor = new Point(-1, -1);
        double cvDilateIterations = 20.0;
        int cvDilateBordertype = 0;
		Scalar cvDilateBordervalue = new Scalar(-1);
		cvDilate(cvDilateSrc, cvDilateKernel, cvDilateAnchor, cvDilateIterations, cvDilateBordertype, cvDilateBordervalue, cvDilateOutput);

        // Step CV_erode0:
        Mat cvErodeSrc = cvDilateOutput;
        Mat cvErodeKernel = new Mat();
        Point cvErodeAnchor = new Point(-1, -1);
        double cvErodeIterations = 20.0;
        int cvErodeBordertype = 0;
        Scalar cvErodeBordervalue = new Scalar(-1);
        cvErode(cvErodeSrc, cvErodeKernel, cvErodeAnchor, cvErodeIterations, cvErodeBordertype, cvErodeBordervalue, cvErodeOutput);

    }

    /**
     * This method is a generated getter for the output of a Blur.
     * 
     * @return Mat output from Blur.
     */
    public Mat blurOutput()
    {
        return blurOutput;
	}

	/**
	 * This method is a generated getter for the output of a HSL_Threshold.
	 * @return Mat output from HSL_Threshold.
	 */
	public Mat hslThresholdOutput() {
		return hslThresholdOutput;
	}

	/**
	 * This method is a generated getter for the output of a CV_dilate.
	 * @return Mat output from CV_dilate.
	 */
	public Mat cvDilateOutput() {
		return cvDilateOutput;
	}

	/**
	 * This method is a generated getter for the output of a CV_erode.
	 * @return Mat output from CV_erode.
	 */
    public Mat cvErodeOutput()
    {
        return cvErodeOutput;
	}


	/**
     * An indication of which type of filter to use for a blur. Choices are BOX,
     * GAUSSIAN, MEDIAN, and BILATERAL
     */
    enum BlurType
    {
        BOX("Box Blur"), GAUSSIAN("Gaussian Blur"), MEDIAN("Median Filter"), BILATERAL("Bilateral Filter");

        private final String label;

        BlurType(String label)
        {
            this.label = label;
        }

        public static BlurType get(String type)
        {
            if (BILATERAL.label.equals(type))
            {
                return BILATERAL;
            }
            else if (GAUSSIAN.label.equals(type))
            {
                return GAUSSIAN;
            }
            else if (MEDIAN.label.equals(type))
            {
                return MEDIAN;
            }
            else
            {
                return BOX;
            }
        }

        @Override
        public String toString()
        {
            return this.label;
        }
	}

	/**
     * Softens an image using one of several filters.
     * 
     * @param input
     *            The image on which to perform the blur.
     * @param type
     *            The blurType to perform.
     * @param doubleRadius
     *            The radius for the blur.
     * @param output
     *            The image in which to store the output.
     */
    private void blur(Mat input, BlurType type, double doubleRadius, Mat output)
    {
        int radius = (int) (doubleRadius + 0.5);
        int kernelSize;
        switch (type)
        {
        case BOX:
            kernelSize = 2 * radius + 1;
            Imgproc.blur(input, output, new Size(kernelSize, kernelSize));
            break;
        case GAUSSIAN:
            kernelSize = 6 * radius + 1;
            Imgproc.GaussianBlur(input, output, new Size(kernelSize, kernelSize), radius);
            break;
        case MEDIAN:
            kernelSize = 2 * radius + 1;
            Imgproc.medianBlur(input, output, kernelSize);
            break;
        case BILATERAL:
            Imgproc.bilateralFilter(input, output, -1, radius, radius);
            break;
        }
	}

	/**
	 * Segment an image based on hue, saturation, and luminance ranges.
	 *
	 * @param input The image on which to perform the HSL threshold.
	 * @param hue The min and max hue
	 * @param sat The min and max saturation
	 * @param lum The min and max luminance
	 * @param output The image in which to store the output.
	 */
	private void hslThreshold(Mat input, double[] hue, double[] sat, double[] lum,
		Mat out) {
		Imgproc.cvtColor(input, out, Imgproc.COLOR_BGR2HLS);
		Core.inRange(out, new Scalar(hue[0], lum[0], sat[0]),
			new Scalar(hue[1], lum[1], sat[1]), out);
	}

	/**
	 * Expands area of higher value in an image.
	 * @param src the Image to dilate.
	 * @param kernel the kernel for dilation.
	 * @param anchor the center of the kernel.
	 * @param iterations the number of times to perform the dilation.
	 * @param borderType pixel extrapolation method.
	 * @param borderValue value to be used for a constant border.
	 * @param dst Output Image.
	 */
	private void cvDilate(Mat src, Mat kernel, Point anchor, double iterations,
	int borderType, Scalar borderValue, Mat dst) {
		if (kernel == null) {
			kernel = new Mat();
		}
		if (anchor == null) {
			anchor = new Point(-1,-1);
		}
		if (borderValue == null){
			borderValue = new Scalar(-1);
		}
        Imgproc.dilate(src, dst, kernel, anchor, (int) iterations);
	}

	/**
	 * Expands area of lower value in an image.
	 * @param src the Image to erode.
	 * @param kernel the kernel for erosion.
	 * @param anchor the center of the kernel.
	 * @param iterations the number of times to perform the erosion.
	 * @param borderType pixel extrapolation method.
	 * @param borderValue value to be used for a constant border.
	 * @param dst Output Image.
	 */
	private void cvErode(Mat src, Mat kernel, Point anchor, double iterations,
		int borderType, Scalar borderValue, Mat dst) {
		if (kernel == null) {
			kernel = new Mat();
		}
		if (anchor == null) {
			anchor = new Point(-1,-1);
		}
		if (borderValue == null) {
			borderValue = new Scalar(-1);
		}
        Imgproc.erode(src, dst, kernel, anchor, (int) iterations);
	}




}

